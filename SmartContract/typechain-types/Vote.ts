/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Vote {
  export type ElectionResultStruct = {
    startTime: BigNumberish;
    endTime: BigNumberish;
    day: string;
    date: string;
    totalVotes: BigNumberish;
    winnerId: BigNumberish;
    winnerName: string;
    winnerVotes: BigNumberish;
    electionName: string;
  };

  export type ElectionResultStructOutput = [
    startTime: bigint,
    endTime: bigint,
    day: string,
    date: string,
    totalVotes: bigint,
    winnerId: bigint,
    winnerName: string,
    winnerVotes: bigint,
    electionName: string
  ] & {
    startTime: bigint;
    endTime: bigint;
    day: string;
    date: string;
    totalVotes: bigint;
    winnerId: bigint;
    winnerName: string;
    winnerVotes: bigint;
    electionName: string;
  };
}

export interface VoteInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "admin"
      | "candidateCount"
      | "candidates"
      | "checkAndEndVoting"
      | "electionName"
      | "endTime"
      | "getCandidate"
      | "getElectionHistoryCount"
      | "getElectionResult"
      | "getTotalCandidates"
      | "history"
      | "setVotingTime"
      | "startTime"
      | "totalVotes"
      | "usedCnicList"
      | "vote"
      | "voterAddresses"
      | "voters"
      | "votingEnded"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "VoteCasted" | "VotingEnded"): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "candidateCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "candidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAndEndVoting",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "electionName",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionHistoryCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCandidates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "history",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingTime",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usedCnicList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "voterAddresses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "voters", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "votingEnded",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "candidateCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkAndEndVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionHistoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "history", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVotingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usedCnicList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingEnded",
    data: BytesLike
  ): Result;
}

export namespace VoteCastedEvent {
  export type InputTuple = [voter: AddressLike, candidateId: BigNumberish];
  export type OutputTuple = [voter: string, candidateId: bigint];
  export interface OutputObject {
    voter: string;
    candidateId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingEndedEvent {
  export type InputTuple = [result: Vote.ElectionResultStruct];
  export type OutputTuple = [result: Vote.ElectionResultStructOutput];
  export interface OutputObject {
    result: Vote.ElectionResultStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Vote extends BaseContract {
  connect(runner?: ContractRunner | null): Vote;
  waitForDeployment(): Promise<this>;

  interface: VoteInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [_name: string, _slogan: string, _gender: string],
    [void],
    "nonpayable"
  >;

  admin: TypedContractMethod<[], [string], "view">;

  candidateCount: TypedContractMethod<[], [bigint], "view">;

  candidates: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        name: string;
        slogan: string;
        gender: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;

  checkAndEndVoting: TypedContractMethod<
    [_day: string, _date: string],
    [void],
    "nonpayable"
  >;

  electionName: TypedContractMethod<[], [string], "view">;

  endTime: TypedContractMethod<[], [bigint], "view">;

  getCandidate: TypedContractMethod<
    [_id: BigNumberish],
    [[string, string, string, bigint]],
    "view"
  >;

  getElectionHistoryCount: TypedContractMethod<[], [bigint], "view">;

  getElectionResult: TypedContractMethod<
    [index: BigNumberish],
    [[bigint, bigint, string, string, bigint, bigint, string, bigint, string]],
    "view"
  >;

  getTotalCandidates: TypedContractMethod<[], [bigint], "view">;

  history: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string
      ] & {
        startTime: bigint;
        endTime: bigint;
        day: string;
        date: string;
        totalVotes: bigint;
        winnerId: bigint;
        winnerName: string;
        winnerVotes: bigint;
        electionName: string;
      }
    ],
    "view"
  >;

  setVotingTime: TypedContractMethod<
    [_startTime: BigNumberish, _endTime: BigNumberish, _electionName: string],
    [void],
    "nonpayable"
  >;

  startTime: TypedContractMethod<[], [bigint], "view">;

  totalVotes: TypedContractMethod<[], [bigint], "view">;

  usedCnicList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  vote: TypedContractMethod<
    [_candidateId: BigNumberish, _cnic: string],
    [void],
    "nonpayable"
  >;

  voterAddresses: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  voters: TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, string] & { hasVoted: boolean; cnic: string }],
    "view"
  >;

  votingEnded: TypedContractMethod<[], [boolean], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<
    [_name: string, _slogan: string, _gender: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "candidateCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "candidates"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, string, bigint] & {
        id: bigint;
        name: string;
        slogan: string;
        gender: string;
        voteCount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "checkAndEndVoting"
  ): TypedContractMethod<[_day: string, _date: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "electionName"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCandidate"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [[string, string, string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElectionHistoryCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getElectionResult"
  ): TypedContractMethod<
    [index: BigNumberish],
    [[bigint, bigint, string, string, bigint, bigint, string, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalCandidates"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "history"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        bigint,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string
      ] & {
        startTime: bigint;
        endTime: bigint;
        day: string;
        date: string;
        totalVotes: bigint;
        winnerId: bigint;
        winnerName: string;
        winnerVotes: bigint;
        electionName: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVotingTime"
  ): TypedContractMethod<
    [_startTime: BigNumberish, _endTime: BigNumberish, _electionName: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalVotes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "usedCnicList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_candidateId: BigNumberish, _cnic: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "voterAddresses"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "voters"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[boolean, string] & { hasVoted: boolean; cnic: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingEnded"
  ): TypedContractMethod<[], [boolean], "view">;

  getEvent(
    key: "VoteCasted"
  ): TypedContractEvent<
    VoteCastedEvent.InputTuple,
    VoteCastedEvent.OutputTuple,
    VoteCastedEvent.OutputObject
  >;
  getEvent(
    key: "VotingEnded"
  ): TypedContractEvent<
    VotingEndedEvent.InputTuple,
    VotingEndedEvent.OutputTuple,
    VotingEndedEvent.OutputObject
  >;

  filters: {
    "VoteCasted(address,uint256)": TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;
    VoteCasted: TypedContractEvent<
      VoteCastedEvent.InputTuple,
      VoteCastedEvent.OutputTuple,
      VoteCastedEvent.OutputObject
    >;

    "VotingEnded(tuple)": TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
    VotingEnded: TypedContractEvent<
      VotingEndedEvent.InputTuple,
      VotingEndedEvent.OutputTuple,
      VotingEndedEvent.OutputObject
    >;
  };
}
